import Foundation
import NIO
import NIOConcurrencyHelpers
import Logging
import Network
import M1MinerShared

/// G√®re la communication r√©seau avec le serveur Stratum
@available(macOS 10.15, *)
public final class NetworkManager: @unchecked Sendable, M1MinerShared.NetworkManager {
    // MARK: - Propri√©t√©s
    
    /// D√©l√©g√© pour les √©v√©nements r√©seau
    public weak var delegate: (any NetworkManagerDelegate)?
    
    /// Adaptateur pour g√©rer la compatibilit√© entre les protocoles
    private var adapter: NetworkManagerAdapter?
    
    /// Groupe d'√©v√©nements pour NIO
    private var group: MultiThreadedEventLoopGroup?
    
    /// Canal de communication
    private var channel: Channel?
    
    /// File d'attente pour les callbacks
    private let callbackQueue = DispatchQueue(label: "com.m1miner.network.callbackQueue")
    
    /// Logger
    private let logger: Logger
    
    /// Verrou pour les op√©rations thread-safety
    private let lock = NIOLock()
    
    // MARK: - Initialisation
    
    /// Initialise un nouveau gestionnaire r√©seau
    /// - Parameter logger: Logger √† utiliser pour les messages de d√©bogage
    public init(logger: Logger) {
        self.logger = logger
        
        // Configurer l'adaptateur si un d√©l√©gu√© est d√©j√† d√©fini
        // (utile si le d√©l√©gu√© est d√©fini avant l'initialisation)
        if let delegate = delegate {
            self.adapter = NetworkManagerAdapter(delegate: delegate, logger: logger)
        }
    }
    
    // MARK: - Connexion
    
    // MARK: - M1MinerShared.NetworkManager
    
    public func networkManager(_ manager: any M1MinerShared.NetworkManager, didConnectToHost host: String, port: Int) {
        logger.info("‚úÖ Connect√© avec succ√®s √† \(host):\(port)")
        delegate?.networkManager(self, didConnectToHost: host, port: port)
    }
    
    public func networkManager(_ manager: any M1MinerShared.NetworkManager, didDisconnectWithError error: Error?) {
        if let error = error {
            logger.error("‚ùå D√©connect√© avec erreur: \(error.localizedDescription)")
        } else {
            logger.info("‚ÑπÔ∏è D√©connect√© du serveur")
        }
        delegate?.networkManager(self, didDisconnectWithError: error)
    }
    
    public func networkManager(_ manager: any M1MinerShared.NetworkManager, didReceiveData data: Data) {
        logger.debug("üì• Donn√©es re√ßues: \(data.count) octets")
        delegate?.networkManager(self, didReceiveData: data)
    }
    
    public func networkManager(_ manager: any M1MinerShared.NetworkManager, didEncounterError error: Error) {
        logger.error("‚ùå √âchec r√©seau: \(error.localizedDescription)")
        
        // Nettoyer les ressources en cas d'√©chec
        cleanup()
        
        // Notifier le d√©l√©gu√© apr√®s le nettoyage
        delegate?.networkManager(self, didEncounterError: error)
    }
    
    // MARK: - Connexion
    
    /// √âtablit une connexion avec le serveur
    /// - Parameters:
    ///   - host: H√¥te du serveur
    ///   - port: Port du serveur
    ///   - completion: Callback appel√© lorsque la connexion est √©tablie ou a √©chou√©
    public func connect(host: String, port: Int, completion: @escaping (Result<Void, Error>) -> Void) {
        // V√©rifier si d√©j√† connect√©
        if channel != nil {
            completion(.failure(StratumError.connectionError("D√©j√† connect√©")))
            return
        }
        
        // Mettre √† jour l'√©tat de connexion
        self.connectionState = .connecting
        
        // Configurer le groupe d'√©v√©nements
        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)
        
        // Cr√©er un bootstrap pour la connexion
        let bootstrap = ClientBootstrap(group: group)
            .channelOption(ChannelOptions.socket(SocketOptionLevel(SOL_SOCKET), SO_REUSEADDR), value: 1)
            .channelInitializer { [weak self] channel in
                guard let self = self else { return channel.eventLoop.makeFailedFuture(StratumError.connectionError("NetworkManager a √©t√© lib√©r√©")) }
                
                // Cr√©er le handler de message
                let messageHandler = StratumMessageHandler(logger: self.logger, networkManager: self)
                
                // Ajouter le d√©codeur de messages Stratum et le handler
                return channel.pipeline.addHandler(ByteToMessageHandler(StratumMessageDecoder()))
                    .flatMap { _ in
                        channel.pipeline.addHandler(messageHandler)
                    }
            }
        
        // √âtablir la connexion
        bootstrap.connect(host: host, port: port).whenComplete { [weak self] (result: Result<Channel, Error>) in
            guard let self = self else { return }
            
            switch result {
            case .success(let channel):
                self.lock.withLock {
                    self.channel = channel
                    self.connectionState = .connected
                }
                self.logger.info("‚úÖ Connect√© au serveur \(host):\(port)")
                self.networkManager(self, didConnectToHost: host, port: port)
                completion(.success(()))
                
            case .failure(let error):
                self.logger.error("‚ùå √âchec de la connexion: \(error.localizedDescription)")
                let stratumError = StratumError.connectionFailed(error)
                self.connectionState = .disconnected
                self.networkManager(self, didEncounterError: stratumError)
                self.cleanup()
                completion(.failure(stratumError))
            }
        }
    }
    
    /// Ferme la connexion
    public func disconnect() {
        guard let channel = channel else { return }
        
        // Mettre √† jour l'√©tat de connexion
        self.connectionState = .disconnecting
        
        channel.close(mode: .all).whenComplete { [weak self] _ in
            guard let self = self else { return }
            self.cleanup()
            self.connectionState = .disconnected
            self.delegate?.networkManager(self, didDisconnectWithError: nil)
        }
    }
    
    /// Nettoie les ressources de mani√®re thread-safe
    private func cleanup() {
        // D√©finir une fonction de nettoyage qui sera ex√©cut√©e de mani√®re synchrone
        let cleanupClosure = { [weak self] in
            guard let self = self else { return }
            
            // Verrouiller pour l'acc√®s thread-safe
            self.lock.lock()
            defer { self.lock.unlock() }
            
            do {
                // Fermer le canal s'il existe
                if let channel = self.channel {
                    try channel.close(mode: .all).wait()
                    self.channel = nil
                    self.connectionState = .disconnected
                    self.logger.debug("‚úÖ Canal de communication ferm√© avec succ√®s")
                }
                
                // Arr√™ter le groupe d'√©v√©nements s'il existe
                if let group = self.group {
                    try group.syncShutdownGracefully()
                    self.group = nil
                    self.connectionState = .disconnected
                    self.logger.debug("‚úÖ Groupe d'√©v√©nements arr√™t√© avec succ√®s")
                }
            } catch {
                self.logger.error("‚ùå Erreur lors du nettoyage: \(error.localizedDescription)")
            }
        }
        
        // Ex√©cuter le nettoyage de mani√®re synchrone
        cleanupClosure()
    }
    
    // MARK: - Envoi de donn√©es
    
    /// Envoie des donn√©es au serveur de mani√®re thread-safe
    /// - Parameters:
    ///   - data: Donn√©es √† envoyer
    ///   - completion: Callback appel√© lorsque l'envoi est termin√© ou a √©chou√©
    public func send(_ data: Data, completion: @escaping (Result<Void, Error>) -> Void) {
        // V√©rifier la connexion de mani√®re thread-safe
        let isChannelActive: Bool = lock.withLock {
            guard let channel = self.channel, channel.isActive else {
                return false
            }
            return true
        }
        
        // Si le canal n'est pas actif, signaler l'erreur
        guard isChannelActive, let channel = self.channel else {
            let error = StratumError.notConnected
            self.logger.error("‚ùå Impossible d'envoyer des donn√©es: Pas connect√© au serveur")
            completion(.failure(error))
            self.delegate?.networkManager(self, didEncounterError: error)
            return
        }
        
        // Cr√©er un buffer avec les donn√©es √† envoyer
        var buffer = channel.allocator.buffer(capacity: data.count)
        buffer.writeBytes(data)
        
        // Envoyer les donn√©es de mani√®re asynchrone
        channel.writeAndFlush(buffer).whenComplete { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success:
                self.logger.debug("üì§ Donn√©es envoy√©es avec succ√®s: \(data.count) octets")
                completion(.success(()))
                
            case .failure(let error):
                self.logger.error("‚ùå √âchec de l'envoi des donn√©es: \(error.localizedDescription)")
                
                // Nettoyer les ressources en cas d'√©chec
                self.cleanup()
                
                // Cr√©er et signaler l'erreur
                let stratumError = StratumError.networkError(error)
                self.delegate?.networkManager(self, didEncounterError: stratumError)
                completion(.failure(stratumError))
            }
        }
    }
    
    // MARK: - Propri√©t√©s utiles
    
    /// √âtat actuel de la connexion (requis par M1MinerShared.NetworkManager)
    public private(set) var connectionState: ConnectionState = .disconnected {
        didSet {
            logger.debug("üîÑ √âtat de la connexion: \(connectionState)")
        }
    }
    
    /// Indique si le gestionnaire est connect√©
    var isConnected: Bool {
        return channel?.isActive ?? false
    }
    
    // MARK: - Gestion des √©v√©nements du StratumMessageHandler
    
    /// G√®re les donn√©es re√ßues du serveur
    /// - Parameter data: Les donn√©es re√ßues
    internal func handleIncomingData(_ data: Data) {
        logger.debug("üì• Donn√©es re√ßues: \(data.count) octets")
        delegate?.networkManager(self, didReceiveData: data)
    }
    
    /// G√®re les erreurs survenues lors de la communication
    /// - Parameter error: L'erreur survenue
    internal func handleError(_ error: Error) {
        logger.error("‚ùå Erreur r√©seau: \(error.localizedDescription)")
        delegate?.networkManager(self, didEncounterError: error)
    }
    
    /// G√®re la d√©connexion du serveur
    internal func handleDisconnection() {
        logger.info("‚ÑπÔ∏è D√©connect√© du serveur")
        connectionState = .disconnected
        delegate?.networkManager(self, didDisconnectWithError: nil)
    }
}

// MARK: - Handlers NIO

/// D√©code les messages Stratum entrants
private final class StratumMessageDecoder: ByteToMessageDecoder, @unchecked Sendable {
    typealias InboundIn = ByteBuffer
    typealias InboundOut = Data
    
    func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState {
        guard buffer.readableBytes > 0 else {
            return .needMoreData
        }
        
        // Cr√©er un Data √† partir du ByteBuffer
        let slice = buffer.slice()
        var data = Data()
        if let bytes = slice.getBytes(at: slice.readerIndex, length: slice.readableBytes) {
            data = Data(bytes)
        }
        buffer.moveReaderIndex(to: buffer.writerIndex)
        context.fireChannelRead(wrapInboundOut(data))
        return .continue
    }
    
    func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState {
        return try decode(context: context, buffer: &buffer)
    }
}

/// G√®re les messages Stratum entrants
private final class StratumMessageHandler: ChannelInboundHandler, @unchecked Sendable {
    typealias InboundIn = Data
    typealias OutboundOut = Data
    
    private let logger: Logger
    private weak var networkManager: NetworkManager?
    
    init(logger: Logger, networkManager: NetworkManager) {
        self.logger = logger
        self.networkManager = networkManager
    }
    
    func channelRead(context: ChannelHandlerContext, data: NIOAny) {
        let data = unwrapInboundIn(data)
        
        // Transmettre les donn√©es au NetworkManager via l'event loop pour assurer la s√©curit√© des threads
        context.eventLoop.execute { [weak self] in
            guard let self = self, let networkManager = self.networkManager else { return }
            // Utiliser la m√©thode appropri√©e du NetworkManager pour g√©rer les donn√©es re√ßues
            networkManager.handleIncomingData(data)
        }
        
        // Signaler que nous avons trait√© le message
        context.fireChannelReadComplete()
    }
    
    func errorCaught(context: ChannelHandlerContext, error: Error) {
        logger.error("‚ùå Erreur de canal: \(error.localizedDescription)")
        
        // Transmettre l'erreur au NetworkManager via l'event loop
        context.eventLoop.execute { [weak self] in
            guard let self = self, let networkManager = self.networkManager else { return }
            networkManager.handleError(error)
        }
        
        // Fermer la connexion en cas d'erreur de mani√®re asynchrone
        context.eventLoop.execute {
            context.close(mode: .all, promise: nil)
        }
    }
    
    func channelInactive(context: ChannelHandlerContext) {
        logger.debug("üîå Canal inactif")
        
        // Notifier le NetworkManager de la d√©connexion
        context.eventLoop.execute { [weak self] in
            guard let self = self, let networkManager = self.networkManager else { return }
            networkManager.handleDisconnection()
        }
        
        // Appeler l'impl√©mentation parente avant de fermer
        context.fireChannelInactive()
        
        // Fermer le canal de mani√®re asynchrone
        context.eventLoop.execute {
            context.close(mode: .all, promise: nil)
        }
    }
    
    func userInboundEventTriggered(context: ChannelHandlerContext, event: Any) {
        // G√©rer les √©v√©nements utilisateur entrants si n√©cessaire
        if let idleEvent = event as? IdleStateHandler.IdleStateEvent {
            logger.debug("üïí √âv√©nement d'inactivit√©: \(idleEvent)")
        }
        
        // Transmettre l'√©v√©nement √† la cha√Æne de handlers
        context.fireUserInboundEventTriggered(event)
    }
    
    // MARK: - Gestion du cycle de vie
    
    func handlerAdded(context: ChannelHandlerContext) {
        logger.debug("‚ûï Handler ajout√© au pipeline")
    }
    
    func handlerRemoved(context: ChannelHandlerContext) {
        logger.debug("‚ûñ Handler retir√© du pipeline")
    }
}
