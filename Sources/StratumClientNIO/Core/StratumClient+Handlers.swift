import Foundation
import Logging
import M1MinerShared
// Les types partag√©s sont d√©j√† accessibles via M1MinerShared

// MARK: - Gestion des notifications

extension StratumClientNIO {
    
    /// G√®re les notifications re√ßues du serveur
    /// - Parameters:
    ///   - method: M√©thode de la notification
    ///   - params: Param√®tres de la notification
    func handleNotification(method: String, params: [Any]) {
        logger.debug("üì¢ Notification re√ßue: \(method)")
        
        switch method {
        case "mining.notify":
            handleNewJobNotification(params: params)
        case "mining.set_difficulty":
            handleSetDifficultyNotification(params: params)
        case "mining.set_extranonce":
            handleSetExtranonceNotification(params: params)
        case "mining.set_target":
            handleSetTargetNotification(params: params)
        default:
            logger.warning("‚ö†Ô∏è Notification non g√©r√©e: \(method)")
        }
    }
    
    /// G√®re la notification de nouveau travail
    /// - Parameter params: Param√®tres de la notification
    fileprivate func handleNewJobNotification(params: [Any]) {
        logger.debug("üîÑ Nouveau travail re√ßu")
        
        // V√©rifie le nombre de param√®tres (zpool envoie souvent 10 ou plus)
        guard params.count >= 9 else {
            logger.error("‚ùå Nombre de param√®tres insuffisant pour mining.notify (\(params.count)): \(params)")
            return
        }
        
        // Extraction robuste des param√®tres, gestion cas zpool
        let jobId = params[0] as? String ?? ""
        let previousHash = params[1] as? String ?? ""
        let coinbase1 = params[2] as? String ?? ""
        let coinbase2 = params[3] as? String ?? ""
        // zpool peut envoyer merkleBranches comme string unique ou tableau
        let merkleBranches: [String]
        if let arr = params[4] as? [String] {
            merkleBranches = arr
        } else if let single = params[4] as? String {
            merkleBranches = [single]
        } else {
            logger.warning("‚ö†Ô∏è Format inattendu pour merkleBranches: \(params[4])")
            merkleBranches = []
        }
        let version = params[5] as? String ?? ""
        let nbits = params[6] as? String ?? ""
        let ntime = params[7] as? String ?? ""
        let cleanJobs = params[8] as? Bool ?? false
        // Param√®tres additionnels sp√©cifiques pool : logg√©s pour debug
        if params.count > 9 {
            logger.info("‚ÑπÔ∏è Param√®tres additionnels mining.notify (zpool): \(Array(params[9...]))")
        }
        // Cr√©ation du job comme avant
        
        // Cr√©er un nouveau travail
        let job = StratumJob(
            jobId: jobId,
            prevHash: previousHash,
            coinbase1: coinbase1,
            coinbase2: coinbase2,
            merkleBranches: merkleBranches,
            version: version,
            nBits: nbits,
            nTime: ntime,
            cleanJobs: cleanJobs,
            extranonce1: "", // √Ä d√©finir correctement
            extranonce2Size: 4 // Taille par d√©faut
        )
        
        // Mettre √† jour le travail actuel
        currentJob = job
    }
    
    /// G√®re la notification de changement de difficult√©
    /// - Parameter params: Param√®tres de la notification
    private func handleSetDifficultyNotification(params: [Any]) {
        logger.debug("üìä Changement de difficult√© re√ßu")
        
        // V√©rifier que nous avons un param√®tre de difficult√©
        guard params.count >= 1, let difficulty = params[0] as? Double else {
            logger.error("‚ùå Param√®tre de difficult√© manquant ou invalide")
            return
        }
        
        logger.info("üéöÔ∏è Nouvelle difficult√©: \(difficulty)")
        
        // La difficult√© est calcul√©e √† partir de nBits dans StratumJob
        // Pas besoin de la mettre √† jour manuellement
        logger.info("üéöÔ∏è Nouvelle difficult√©: \(difficulty) (bas√© sur nBits)")
    }
    
    /// G√®re la notification de changement d'extranonce
    /// - Parameter params: Param√®tres de la notification
    private func handleSetExtranonceNotification(params: [Any]) {
        logger.debug("üîÑ Changement d'extranonce re√ßu")
        
        // V√©rifier que nous avons suffisamment de param√®tres
        guard params.count >= 1, let extranonce = params[0] as? String else {
            logger.error("‚ùå Param√®tre extranonce manquant ou invalide")
            return
        }
        
        logger.info("üîë Nouvel extranonce: \(extranonce)")
        
        // Mettre √† jour l'extranonce1 du travail actuel si disponible
        _stateLock.withLock {
            if let job = _currentJob {
                // Cr√©er une nouvelle instance avec l'extranonce mis √† jour
                _currentJob = StratumJob(
                    jobId: job.jobId,
                    prevHash: job.prevHash,
                    coinbase1: job.coinbase1,
                    coinbase2: job.coinbase2,
                    merkleBranches: job.merkleBranches,
                    version: job.version,
                    nBits: job.nBits,
                    nTime: job.nTime,
                    cleanJobs: job.cleanJobs,
                    extranonce1: extranonce,
                    extranonce2Size: job.extranonce2Size,
                    target: job.target,
                    ghostRiderData: job.ghostRiderData
                )
            }
        }
    }
}
